/*global ModustriServices,_*/
/**
 * @fileOverview Functions for both inspection and inspection list objects.
 * @author Tim Snyder <tim.snyder@modustri.com>
 */

ModustriServices.factory('InsServices', ['$log', '$q','$http', 'AuthServices',
    'MachineServices', 'Utilities', 'AppSettings',
    function ($log, $q, $http, AuthServices, MachineServices, Utilities, AppSettings) {

        "use strict";

        var svc = {};

        var errorcb = function (data, status, headers) {
            $log.error(data);
            $log.error(status);
            $log.error(headers);
        };

        svc.query = function (page) {
            var UserCreds = AuthServices.getUserCreds();
            if (AuthServices.getDealerID() && UserCreds['level'] >= 2) {
                return $http.post(AppSettings.BASE_URL + 'inspections/' + AuthServices.getUserHash() +
                        '/' + AuthServices.getUserID() + '/',
                    { 'dealer_id': AuthServices.getDealerID(), 'perpage': AppSettings.ITEMS_PER_PAGE, 'page': page })
                    .success(function (data, status, headers) {
                        return data;
                    })
                    .error(errorcb);
            }
            else {
                return $http.post(AppSettings.BASE_URL + 'inspections/' + AuthServices.getUserHash() +
                        '/' + AuthServices.getUserID() + '/',
                    { 'perpage': AppSettings.ITEMS_PER_PAGE, 'page': page })
                    .success(function (data, status, headers) {
                        return data;
                    })
                    .error(errorcb);
            }
        };

        //get single inspection from server.
        svc.get = function (inspectionID) {
            return $http.get(AppSettings.BASE_URL + 'inspection/' + AuthServices.getUserHash() +
                '/' + AuthServices.getUserID() + '/' + inspectionID + '/')
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        //special request for permalink, requires no user id or digest, just a unique hash generated by the iOS app.
        svc.getForPermalink = function (hash) {
            return $http.get(AppSettings.BASE_URL + 'direct/inspection/' + hash + '/')
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        //what it says on the box.
        svc.getByMachineId = function (machineID) {
            return $http.get(AppSettings.BASE_URL + 'inspections/' + AuthServices.getUserHash() + '/' +
                AuthServices.getUserID() + '/?machine_id=' + machineID)
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        svc.getByCustomerId = function (customerID) {
            return $http.get(AppSettings.BASE_URL + 'inspections/' + AuthServices.getUserHash() + '/' +
                AuthServices.getUserID() + '/?customer_id=' + customerID)
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        svc.getByDealerIdStartEnd = function (dealerID, start, end) {
            var ulevel = AuthServices.getUserLevel();
            var data = {};
            if (ulevel < 2) {
                data = {start: start, end: end};
            } else {
                data = {dealer_id: AuthServices.getDealerID(), start: start, end: end};
            }
            // /portal/dashboard/inspections/ 
            return $http.post(AppSettings.BASE_URL + 'portal/dashboard/inspections/' +
                    AuthServices.getUserHash() + '/' + AuthServices.getUserID() + '/',
                data)
                .success(function (data, status, headers) {
                    return data;
                }).error(errorcb);
        };

        svc.getNewestInspectionByCustomerId = function (customerID) {
            return $http.post(AppSettings.BASE_URL + 'inspections/' +
                    AuthServices.getUserHash() + '/' + AuthServices.getUserID() + '/',
                { customer_id: customerID, page: 1, perpage: 1})
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        svc.getNewestInspectionByMachineId = function (machineID) {
            return $http.post(AppSettings.BASE_URL + 'inspections/' +
                    AuthServices.getUserHash() + '/' + AuthServices.getUserID() + '/',
                { machine_id: machineID, page: 1, perpage: 2})
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        svc.getByUserId = function (userID) {
            return $http.get(AppSettings.BASE_URL + 'inspections/' + AuthServices.getUserHash() +
                '/' + AuthServices.getUserID() + '/?user_id=' + userID)
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        svc.getByUserIdCustomerId = function (userID, customerID) {
            return $http.get(AppSettings.BASE_URL + 'inspections/' + AuthServices.getUserHash() + '/' +
                AuthServices.getUserID() + '/?user_id=' + userID + '&customer_id=' + customerID)
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        svc.getByDateRange = function (page, start, end) {
            return $http.post(AppSettings.BASE_URL + 'inspections/' + AuthServices.getUserHash() +
                    '/' + AuthServices.getUserID() + '/',
                { dealer_id: AuthServices.getDealerID(), perpage: AppSettings.ITEMS_PER_PAGE, page: page, start: start, end: end })
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        svc.setMeasurementToolNames = function ($scope, part) {
            var setProperties = function () {
                //if there is a tool id assigned to this part
                if (typeof svc.tool_names[part.left.tool - 1] !== 'undefined') {
                    //subtract one to align part IDs with their array indexes
                    part.left.tool_name = svc.tool_names[part.left.tool - 1].label;
                }
                if (typeof svc.tool_names[part.right.tool - 1] !== 'undefined') {
                    part.right.tool_name = svc.tool_names[part.right.tool - 1].label;
                }
            };
            if (typeof svc.tool_names === 'undefined') {
                svc.getToolTypes().then(function (obj) {
                    //cache the names pulled from the api.
                    svc.tool_names = obj.data.results;
                    $scope.Tools = obj.data.results;
                    setProperties();
                });
            } else {
                setProperties();
            }
        };

        /**
         * @param part_type
         * @param component_index
         * @param wear_options
         * @param scope
         * @param {string} show_metric
         * @desc
         */

        //use the lookup tables attached to components to find the correct wear percentage.
        svc.setPercentages = function (part_type, component_index, wear_options, scope, show_metric) {

            console.log('called?');
            var component = false;
            var measured_left;
            var measured_right;
            var tool_left;
            var tool_right;
            var ins = scope.Ins.inspection_obj.results;
            var component_id = ins[part_type][component_index].left.id;
            var part = ins[part_type][component_index];

            //find the right component.
            scope.Components[part_type].forEach(function (el, index) {
                if (scope.Components[part_type][index].component_id === component_id) {
                    component = scope.Components[part_type][index];
                }
            });

            //if this function has been fired from a change in the type of measurment tool,
            //lets make sure we update the tool name in the UI.
            svc.setMeasurementToolNames(scope, part);

            //find the wear percentage value.
            if (component) {

                if(show_metric){
                    measured_left = Utilities.mmToIn(part.left.measured);
                    measured_right = Utilities.mmToIn(part.right.measured);
                }
                else{
                    measured_left = part.left.measured;
                    measured_right = part.right.measured;
                }

                tool_left = scope.Tools[parseInt(part.left.tool, 10) - 1];
                tool_right = scope.Tools[parseInt(part.right.tool, 10) - 1];

                if (tool_left) {
                    part.left.percentage = component.getWearPercentages(measured_left, wear_options, tool_left.keyname);
                } else {
                    part.left.percentage = "";
                }

                if (tool_right) {
                    part.right.percentage = component.getWearPercentages(measured_right, wear_options, tool_right.keyname);
                } else {
                    part.right.percentage = "";
                }

                //sets the condition of the component to a string value for the ui
                svc.setCondition(ins, part_type, component_index);
            }
        };

        /**
         * @param scope
         * @desc
         */

        svc.setMainPhoto = function (scope) {
            var cache, t_id;
            //get photo of the machine at this point in time of when the inspection was taken.
            if (scope.Ins.inspection_obj.machine.main_image_id !== "") {
                var myimg = scope.Ins.inspection_obj.machine.main_image_id;
                if(myimg === 0 || myimg === '0' || myimg === null || myimg === undefined)
                {
                    var deferred = $q.defer();
                    deferred.resolve({'error': 'bad image id'});
                    return deferred.promise;
                }else
                {
                    scope.Ins.inspection_obj.machine.img = AppSettings.BASE_URL + "imgtmb/" +
                        scope.Ins.inspection_obj.machine.main_image_id + "/";
                    scope.Ins.inspection_obj.machine.img_full = AppSettings.BASE_URL + "img/" + scope.Ins.inspection_obj.machine.main_image_id + "/";
                    t_id = setTimeout(function () {
                        cache = document.createElement('img');
                        cache.src = scope.Ins.inspection_obj.machine.img_full;
                    }, 0);
                }
            }
            //otherwise use the default main image of the machine.
            else {
                MachineServices.get(scope.Ins.machine_id).then(function (obj) {
                    if (obj.data.results.main_image_id !== "") {
                        MachineServices.getPhoto(obj.data.results.main_image_id).then(function (obj) {
                            var myimg = obj.data.results.id;
                            if(myimg === 0 || myimg === '0' || myimg === null || myimg === undefined)
                            {
                                var deferred = $q.defer();
                                deferred.resolve({'error': 'bad image id'});
                                return deferred.promise;
                            }else
                            {
                                scope.Ins.inspection_obj.machine.img = AppSettings.BASE_URL + "imgtmb/" + myimg + "/";
                                scope.Ins.inspection_obj.machine.img_full = AppSettings.BASE_URL +
                                    "img/" + myimg + "/";
                                t_id = setTimeout(function () {
                                    cache = document.createElement('img');
                                    cache.src = scope.Ins.inspection_obj.machine.img_full;
                                }, 0);
                            }
                        });
                    }
                });
            }
        };

        /**
         * @param scope
         * @desc
         */

        svc.cleanUpNulls = function (scope) {
            // Clean up (null) from the UI
            if (scope.Ins.inspection_obj.machine.equipment_id === '(null)') {
                scope.Ins.inspection_obj.machine.equipment_id = "N/A";
            }

            // A bug was introduced in the iOS side of things, whereby the
            // hour_meter_reading, hour_meter_operational, hour_per_week
            if (scope.Ins.inspection_obj.machine.hasOwnProperty('hour_meter_reading')) {
                // We have the field set, lets verify that it's what is a in
                // the higher level inspection obj
                var mhr = scope.Ins.inspection_obj.machine.hour_meter_reading;
                var ihr = scope.Ins.inspection_obj.hour_meter_reading;
                if (ihr > mhr) {
                    scope.Ins.inspection_obj.machine.hour_meter_reading = ihr;
                }
            } else {
                scope.Ins.inspection_obj.machine.hour_meter_reading = scope.Ins.inspection_obj.hour_meter_reading;
            }

            // Same issue with hour meter operational status
            if (scope.Ins.inspection_obj.machine.hasOwnProperty('hour_meter_operational')) {
                // We have the field set, lets verify that it's what is a in
                // the higher level inspection obj
                var mho = scope.Ins.inspection_obj.machine.hour_meter_operational;
                var iho = scope.Ins.inspection_obj.hour_meter_operational;
                if (iho > mho) {
                    scope.Ins.inspection_obj.machine.hour_meter_operational = iho;
                }
            } else {
                scope.Ins.inspection_obj.machine.hour_meter_operational = scope.Ins.inspection_obj.hour_meter_operational;
            }

            // Same issue with odometer
            if (scope.Ins.inspection_obj.machine.hasOwnProperty('odometer_reading')) {
                // We have the field set, lets verify that it's what is a in
                // the higher level inspection obj
                var mhod = scope.Ins.inspection_obj.machine.odometer_reading;
                var ihod = scope.Ins.inspection_obj.odometer_reading;
                if (ihod > mhod) {
                    scope.Ins.inspection_obj.machine.odometer_reading = ihod;
                }
            } else {
                scope.Ins.inspection_obj.machine.odometer_reading = scope.Ins.inspection_obj.odometer_reading;
            }

            // Same issue with and hours per week
            if (scope.Ins.inspection_obj.machine.hasOwnProperty('hours_per_week')) {
                // We have the field set, lets verify that it's what is a in
                // the higher level inspection obj
                var mhpw = scope.Ins.inspection_obj.machine.hours_per_week;
                var ihpw = scope.Ins.inspection_obj.hours_per_week;
                if (ihpw > mhpw) {
                    scope.Ins.inspection_obj.machine.hours_per_week = ihpw;
                }
            } else {
                scope.Ins.inspection_obj.machine.hours_per_week = scope.Ins.inspection_obj.hours_per_week;
            }
        };


        /**
         * @desc Get number of inspections for a dealer.
         */
        svc.getInspectionCount = function () {
            return $http.post(AppSettings.BASE_URL + 'stats/' + AuthServices.getUserHash() +
                '/' + AuthServices.getUserID() + '/', { 'type': 'dealerinspections', 'id': AuthServices.getDealerID() })
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        svc.getInspectionCountByRange = function(start, end)
        {
            return $http.post(AppSettings.BASE_URL + 'stats/' + AuthServices.getUserHash() +
                '/' + AuthServices.getUserID() + '/', {
                    'type': 'inspectionsbyuserlevel',
                    'id': AuthServices.getUserID(),
                    'start': start,
                    'end': end
                    })
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        /**
        * @param scope
        * @desc Calculates the number of hours of wear remaining on a given
        *       component in order to reach the given rate (70%, 100%, 120% etc)
        */
        svc.FailCalc = function(curr, prev, rate)
        {
            var hpp = curr.hours - prev.hours;  // Hours in period
            var pctpp = curr.pct - prev.pct;    // Percent in period
            var hours_per_perc = hpp / pctpp;   // Hours per %
            var vp = rate - curr.pct;           // estimated available % to rate
            if(hpp === 0)
            {
                return 0;
            }
            var retval = vp * hours_per_perc;
            return retval;
        };
        /**
         * @param scope
         * @desc Calculate date of failure for each component
         */

        svc.buildSummariesTable = function(scope){
            var tools = [];
            tools['1'] = 'Ultrasonic';
            tools['2'] = 'Depth Gauge';
            tools['3'] = 'Tape Measure';
            tools['4'] = 'Caliper';
            var summaries=[];
            var machine_id = scope.Ins.machine_id;
            var insp_id = scope.Ins.id;
            if(scope.Ins.inspection_obj.hasOwnProperty('maintenance_date'))
            {
                scope.Ins.inspection_obj.maintenance_datestring = new moment.unix(scope.Ins.inspection_obj.maintenance_date).format('MM/DD/YYYY');
            }
            //console.log('MachineID: ' + machine_id + '\nInsID: ' + insp_id);
            MachineServices.getProjections(machine_id).then(function(obj)
            {
                if(!scope.Ins.inspection_obj.hasOwnProperty('remaining_life'))
                {
                    scope.Ins.inspection_obj.remaining_life = "";
                }
                if(obj.data.results.length > 0)
                {
                    for(var i in obj.data.results)
                    {
                        var insp_data = obj.data.results[i];
                        for(var x in insp_data)
                        {
                            var part = insp_data[x];
                            if(part.a_ins_id === insp_id)
                            {
                                var m = scope.Ins.inspection_obj.results[x];
                                var plm = "" + part.am.lm;
                                var prm = "" + part.am.rm;
                                if(typeof m !== 'string')
                                {
                                    for(var z in m)
                                    {
                                        if(z !=='model_id')
                                        {
                                            if(plm == m[z].left.measured)
                                            {
                                                m[z].left.hours_left = Math.round(part.l_h['70'], 0);
                                                m[z].left.hours_left_100 = Math.round(part.l_h['100'], 0);
                                                m[z].left.hours_left_120 = Math.round(part.l_h['120'], 0);
                                                m[z].left.comp = x;
                                                m[z].left.comp_type = x.replace('_',' ');
                                                m[z].left.dir = "L";
                                                m[z].left.full_wear_date = new moment.unix(part.adate).add(part.l_date['100'], 'seconds').format('MMM DD, YYYY');
                                                m[z].left.over_wear_date = new moment.unix(part.adate).add(part.l_date['120'], 'seconds').format('MMM DD, YYYY');
                                                m[z].left.measured = part.am.lm;
                                                m[z].left.percentage = part.am.lpct + "%";
                                                summaries.push(m[z].left);
                                            }
                                            if(prm == m[z].right.measured)
                                            {
                                                m[z].right.hours_left = Math.round(part.r_h['70'], 0);
                                                m[z].right.hours_left_100 = Math.round(part.r_h['100'], 0);
                                                m[z].right.hours_left_120 = Math.round(part.r_h['120'], 0);
                                                m[z].right.comp = x;
                                                m[z].right.comp_type = x.replace('_',' ');
                                                m[z].right.dir = "R";
                                                m[z].right.full_wear_date = new moment.unix(part.adate).add(part.r_date['100'], 'seconds').format('MMM DD, YYYY');
                                                m[z].right.over_wear_date = new moment.unix(part.adate).add(part.r_date['120'], 'seconds').format('MMM DD, YYYY');
                                                m[z].right.measured = part.am.rm;
                                                m[z].right.percentage = part.am.rpct + "%";
                                                summaries.push(m[z].right);
                                            }

                                        }
                                    }
                                }else{
                                    // console.dir(m);
                                }
                            }
                        }
                    }
                }
                summaries.sort(function (a, b) {
                    return (parseInt(a.percentage, 10) - parseInt(b.percentage, 10)) * (-1);
                });
                scope.Summaries = summaries;
                scope.$emit('summaries_table_built');
            });
        };

        svc.getFailureDates = function (scope) {
            //console.log('called old get fail dates');
            //todo: clean this up, reduce redundancy
            var weeks_left;
            var weeks_left_mseconds;
            var ins_date_mseconds = scope.Ins.timestamp * 1000;
            var mseconds_per_week = 604800000;
            var mseconds_failure_date;
            var date, day, month, year;
            var current_hours_on_part;
            var total_hours_for_part;
            var total_hours_for_part_100;
            var total_hours_for_part_120;
            var hour_meter_reading = parseInt(scope.Ins.inspection_obj.hour_meter_reading, 10);
            var prev_hour_meter_reading = '';
            var hours_per_week = parseInt(scope.Ins.inspection_obj.hours_per_week, 10);

            if (!scope.Ins.inspection_obj.machine.hasOwnProperty('remaining_life')) {
                scope.Ins.inspection_obj.machine.remaining_life = '';
            }
            if (typeof scope.Prev_ins !== 'undefined' && scope.Prev_ins !== false) {
                prev_hour_meter_reading = parseInt(scope.Prev_ins.inspection_obj.hour_meter_reading, 10);

                _.forEach(scope.Ins.inspection_obj.results, function (comp, comp_index, comp_list) {
                    _.forEach(comp, function (part, part_index, part_list) {
                        if (part.hasOwnProperty('left') && part.left.hasOwnProperty('percentage')) {
                            if (hour_meter_reading > 0) {
                                current_hours_on_part = hour_meter_reading - prev_hour_meter_reading;

                                if (current_hours_on_part > 0) {

                                    //todo: what happens if there is 0% wear?
                                    if (part.left.percentage !== '' && !isNaN(part.left.percentage) && parseInt(part.left.percentage, 10) !== 0) {

                                        //get hours left - left side
                                        total_hours_for_part_100 = (current_hours_on_part * 100) / parseInt(part.left.percentage, 10);
                                        total_hours_for_part_120 = (current_hours_on_part * 120) / parseInt(part.left.percentage, 10);

                                        total_hours_for_part_100 = parseInt(total_hours_for_part_100, 10);
                                        total_hours_for_part_120 = parseInt(total_hours_for_part_120, 10);
                                        total_hours_for_part = total_hours_for_part_100;
                                        part.left.hours_left = total_hours_for_part - current_hours_on_part;
                                        if (part.left.hours_left < scope.Ins.inspection_obj.machine.remaining_life ||
                                            scope.Ins.inspection_obj.machine.remaining_life === '') {
                                            scope.Ins.inspection_obj.machine.remaining_life = part.left.hours_left;
                                        }
                                        part.left.hours_left_100 = total_hours_for_part_100 - current_hours_on_part;
                                        part.left.hours_left_120 = total_hours_for_part_120 - current_hours_on_part;

                                        //get part failure dates - left
                                        if (scope.Ins.timestamp > 0 && hours_per_week > 0) {
                                            //get 100% wear date
                                            weeks_left = parseInt(part.left.hours_left_100 / hours_per_week, 10);
                                            if (weeks_left) { //if ! NaN
                                                weeks_left_mseconds = parseInt(weeks_left * mseconds_per_week, 10);
                                                mseconds_failure_date = ins_date_mseconds + weeks_left_mseconds;
                                                date = new Date(mseconds_failure_date);
                                                day = date.getDate();
                                                month = date.getMonth();
                                                year = date.getFullYear();
                                                month++;
                                                part.left.full_wear_date = month + '/' + day + '/' + year;

                                                //get 120% wear date
                                                weeks_left = parseInt(part.left.hours_left_120 / hours_per_week, 10);
                                                weeks_left_mseconds = parseInt(weeks_left * mseconds_per_week, 10);
                                                mseconds_failure_date = ins_date_mseconds + weeks_left_mseconds;
                                                date = new Date(mseconds_failure_date);

                                                day = date.getDate();
                                                month = date.getMonth();
                                                year = date.getFullYear();

                                                month++;

                                                part.left.over_wear_date = month + '/' + day + '/' + year;
                                            }
                                            else {
                                                part.left.full_wear_date = 0;
                                                part.left.over_wear_date = 0;
                                            }
                                        }

                                    }

                                    if (part.right.percentage !== '' && !isNaN(part.right.percentage) && parseInt(part.right.percentage, 10) !== 0) {
                                        //get hours left - right side
                                        total_hours_for_part_100 = (current_hours_on_part * 100) / parseInt(part.right.percentage, 10);
                                        total_hours_for_part_120 = (current_hours_on_part * 120) / parseInt(part.right.percentage, 10);

                                        total_hours_for_part_100 = parseInt(total_hours_for_part_100, 10);
                                        total_hours_for_part_120 = parseInt(total_hours_for_part_120, 10);
                                        total_hours_for_part = total_hours_for_part_100;

                                        part.right.hours_left = total_hours_for_part - current_hours_on_part;
                                        if (part.right.hours_left < scope.Ins.inspection_obj.machine.remaining_life ||
                                            scope.Ins.inspection_obj.machine.remaining_life === '') {
                                            scope.Ins.inspection_obj.machine.remaining_life = part.right.hours_left;
                                        }
                                        part.right.hours_left_100 = total_hours_for_part_100 - current_hours_on_part;
                                        part.right.hours_left_120 = total_hours_for_part_120 - current_hours_on_part;

                                        //get part failure dates - right
                                        if (scope.Ins.timestamp > 0 && hours_per_week > 0) {
                                            //get 100% wear date
                                            weeks_left = parseInt(part.right.hours_left_100 / hours_per_week, 10);
                                            if (weeks_left) { //if ! NaN
                                                weeks_left_mseconds = parseInt(weeks_left * mseconds_per_week, 10);
                                                mseconds_failure_date = ins_date_mseconds + weeks_left_mseconds;
                                                date = new Date(mseconds_failure_date);
                                                day = date.getDate();
                                                month = date.getMonth();
                                                year = date.getFullYear();
                                                month++;
                                                part.right.full_wear_date = month + '/' + day + '/' + year;

                                                //get 120% wear date
                                                weeks_left = parseInt(part.right.hours_left_120 / hours_per_week, 10);
                                                weeks_left_mseconds = parseInt(weeks_left * mseconds_per_week, 10);
                                                mseconds_failure_date = ins_date_mseconds + weeks_left_mseconds;
                                                date = new Date(mseconds_failure_date);

                                                day = date.getDate();
                                                month = date.getMonth();
                                                year = date.getFullYear();

                                                month++;

                                                part.right.over_wear_date = month + '/' + day + '/' + year;
                                            }
                                            else {
                                                part.right.full_wear_date = 0;
                                                part.right.over_wear_date = 0;
                                            }
                                        }

                                    }

                                }
                            }
                        }
                    });
                });
            }
        };


        /*
         * @param scope
         * @param obj
         * @desc Gets inspection photos and caches them for lightbox plugin.
         * @todo Find a better goddamn lightbox plugin.
         */

        svc.renderInspectionPhotos = function (scope, obj) {
            var l, r; //components where id matches photo id
            var ins = scope.Ins.inspection_obj; //shortcut
            var l_caches = [];
            var r_caches = [];

            // todo: this is a brutal loop, should be refactored and optimised but for now it works
            // - JJR 3/21/2014
            if (obj.data.hasOwnProperty('results') && obj.data.results.length > 0) {
                ins.imgs = [];
                _.each(obj.data.results, function (photo_obj, index, list) {
                    // We have an image object, iterate through the components
                    // within the inpsection object and shim them in
                    // where applicable

                    _.each(ins.results,
                        function (result_obj, result_idx, result_lst) {
                            if (typeof result_obj !== 'string') {
                                var rl = result_obj.length;
                                if (rl > 0) {
                                    for (var i = 0; i < rl; i++) {
                                        if (result_obj[i].hasOwnProperty('left')) {
                                            //console.log('has left');
                                            if (result_obj[i].left.hasOwnProperty('image_timestamp')) {
                                                //console.log('left has img');
                                                if (photo_obj.timestamp === result_obj[i].left.image_timestamp) {
                                                    ins.results[result_idx][i].left.image_url = AppSettings.BASE_URL +
                                                        'imgtmb/' + photo_obj.id;
                                                    ins.results[result_idx][i].left.image_full_url = AppSettings.BASE_URL +
                                                        'img/' + photo_obj.id;
                                                    l_caches[i] = document.createElement('img');
                                                    l_caches[i].src = AppSettings.BASE_URL + 'img/' + photo_obj.id + '/';
                                                }
                                            }
                                        }
                                        if (result_obj[i].hasOwnProperty('right')) {
                                            //console.log('has right');
                                            if (result_obj[i].right.hasOwnProperty('image_timestamp')) {
                                                if (photo_obj.timestamp === result_obj[i].right.image_timestamp) {
                                                    ins.results[result_idx][i].right.image_url = AppSettings.BASE_URL +
                                                        'imgtmb/' + photo_obj.id;
                                                    ins.results[result_idx][i].right.image_full_url = AppSettings.BASE_URL +
                                                        'img/' + photo_obj.id;
                                                    r_caches[i] = document.createElement('img');
                                                    r_caches[i].src = AppSettings.BASE_URL + 'img/' + photo_obj.id + '/';
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        });
                });
            }
        };

        /*
         * @param payload
         * @param id
         * @desc Update current inspection to server.
         */

        svc.save = function (payload, id) {
            return $http.post(AppSettings.BASE_URL + 'inspection/' + AuthServices.getUserHash() + '/' +
                AuthServices.getUserID() + '/' + id + '/', payload)
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };


        /*
         * @param id
         * @desc Save a new inspection.
         */

        svc.saveNew = function (payload) {
            return $http.post(AppSettings.BASE_URL + 'inspection/' + AuthServices.getUserHash() +
                '/' + AuthServices.getUserID() + '/', payload)
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };


        /*
         * @param id
         * @desc Deletes inspection.
         */

        svc.del = function (id) {
            return $http.delete(AppSettings.BASE_URL + 'inspection/' + AuthServices.getUserHash() +
                '/' + AuthServices.getUserID() + '/' + id + '/')
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };


        /*
         * @desc Get all jobsites.
         */

        svc.queryJobSites = function () {
            return $http.get(AppSettings.BASE_URL + 'jobsites/' + AuthServices.getUserHash() +
                '/' + AuthServices.getUserID() + '/')
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        /*
         * @param jobsite_id
         * @desc Get a single jobsite.
         */

        svc.getJobSite = function (jobsite_id) {
            return $http.get(AppSettings.BASE_URL + 'jobsite/' + AuthServices.getUserHash() + '/' + AuthServices.getUserID() + '/?id=' + jobsite_id + '/')
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        //different tools used to measure parts.
        svc.getToolTypes = function () {
            return $http.get(AppSettings.BASE_URL + 'measuretypes/' + AuthServices.getUserHash() + '/' +
                AuthServices.getUserID() + '/', { cache: true })
                .success(function (data, status, headers) {
                    return data;
                })
                .error(errorcb);
        };

        svc.setComponentDescription = function (part) {
            if ("id" in part.left) {
                MachineServices.getComponentData(part.left.id).then(function (obj) {
                    part.description = obj.data.results.description;
                });
            }
        };

        /**
         * @param ins
         * @param part_type
         * @param component_index
         * @desc add a description of the condition of the part for display purposes in the UI
         */

        svc.setCondition = function (ins, part_type, component_index) {
            var left_percent = '';
            var right_percent = '';
            if (typeof ins[part_type][component_index].left !== 'undefined' &&
                typeof ins[part_type][component_index].left.percentage !== 'undefined') {
                //some percentage values are strings and have % attached to them...
                left_percent = parseInt(ins[part_type][component_index].left.percentage, 10);
                if (left_percent > 25 && left_percent < 75) {
                    ins[part_type][component_index].left.condition = "fair";
                }
                else if (left_percent <= 25) {
                    ins[part_type][component_index].left.condition = "good";
                }
                else if (left_percent >= 75) {
                    ins[part_type][component_index].left.condition = "poor";
                }else
                {
                    ins[part_type][component_index].left.condition = "poor";
                }
            }

            if (typeof ins[part_type][component_index].right !== 'undefined' &&
                typeof ins[part_type][component_index].right.percentage !== 'undefined') {
                right_percent = parseInt(ins[part_type][component_index].right.percentage, 10);
                if (right_percent > 25 && right_percent < 75) {
                    ins[part_type][component_index].right.condition = "fair";
                }
                else if (right_percent <= 25) {
                    ins[part_type][component_index].right.condition = "good";
                }
                else if (right_percent >= 75) {
                    ins[part_type][component_index].right.condition = "poor";
                }else
                {
                    ins[part_type][component_index].right.condition = "poor";
                }
            }
        };

        //TODO this should not be hardcoded, we should get an empty inpsection from the api
        svc.getEmptyInspection = function () {
            return {
                "inspection_obj": {
                    "jobsite": {
                        "id": '',
                        "lon": '',
                        "lat": '',
                        "contact_id": '',
                        "address": '',
                        "customer_id": '',
                        "name": '',
                        "modified": '',
                        "archived": ''
                    },
                    "dealer": {
                        "id": '',
                        "phone": '',
                        "city": '',
                        "address": '',
                        "name": '',
                        "zip": '',
                        "primary_contact_id": '',
                        "state": '',
                        "archived": '',
                        "image_id": ''
                    },
                    "manufacturer": {
                        "id": '',
                        "us_dealers": '',
                        "company": ''
                    },
                    "machine": {
                        "id": '',
                        "customer_id": '',
                        "dealer_id": '',
                        "model": '',
                        "serial": '',
                        "equipment_id": '',
                        "manufacturer_id": '',
                        "hour_meter_operational": '',
                        "under_carriage_code": '',
                        "under_carriage_brand": '',
                        "hour_meter_reading": '',
                        "main_image_id": '',
                        "model_id": '',
                        "note": '',
                        "modified": '',
                        "archived": '',
                        "last_inspected": '',
                        "track_type_id": '',
                        "sales_rep": '',
                        "product_support_sales_rep": '',
                        "lat":'',
                        "lon": ''
                    },
                    "results": {
                        "track_links": [],
                        "track_sag": {
                            "left": "",
                            "right": ""
                        },
                        "dry_joints": {
                            "left": "",
                            "right": ""
                        },
                        "frame_extension": {
                            "left": "",
                            "right": ""
                        },
                        "shoe_width": {
                            "left": "",
                            "right": ""
                        },
                        "hour_meter_reading": '',
                        "bushing_allowable_wear": 'greater',
                        "carrier_rollers": [],
                        "underfoot_conditions": {
                            "impact": 'med',
                            "packing": 'med',
                            "abrasive": 'med',
                            "moisture": 'med'
                        },
                        "track_rollers": [],
                        "link_allowable_wear": 'greater',
                        "sprockets": [],
                        "bushings": [],
                        "idlers_front": [],
                        "idlers_rear": [],
                        "track_shoes": []
                    },
                    //owner of machine at time of inspection
                    "customer": {
                        "id": '',
                        "name": '',
                        "address": '',
                        "city": '',
                        "state": '',
                        "zip": '',
                        "country": '',
                        "phone": '',
                        "primary_contact_id": '',
                        "note": '',
                        "image_id": '',
                        "modified": '',
                        "archived": '',
                        "last_inspected": ''
                    },
                    "user": {
                        'id': '',
                        'username': '',
                        'password': '',
                        'customer_id': '',
                        'email': '',
                        'dealer_id': '',
                        'salt': '',
                        'modified': '',
                        'userlevel': '',
                        'archived': ''
                    },
                    "inspector": '',
                    "hours_per_week": '',
                    "maintenance_date": '',
                    "inspectionTypeGET": '',
                    "inspectionTypeGeneral": '',
                    "inspectionTypeUCI": ''
                },
                "job_site_id": '',
                "dealer_id": '',
                "user_id": '',
                "timestamp": '',
                //current owner of machine
                "customer_id": '',
                "machine_id": '',
                "completed": 0
            };
        };

        svc.saveGeneralPhotos = function(payload){
            var deferred = $q.defer();
            var fd = new FormData();
            //fd.append('machine_obj', payload.machine_obj);
            //fd.append("machine_id", payload.machine_id);
            fd.append("file", payload.file);
            //fd.append("customer_id", payload.customer_id);
            fd.append("description", payload.description);
            fd.append("user_id", payload.user_id);

            //the api doesn't like when angular uses the formData api so we will use plain ol xhr.
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function(){
                if(xhr.readyState === 4 && xhr.status === 200){
                    //resolve promise with success
                    var xhr_response = xhr.response + '';
                    var resp = JSON.parse(xhr_response);
                    deferred.resolve(resp.results);
                }
                else if(xhr.readyState === 4 && xhr.status !== 200){
                    //resolve promise with error
                    deferred.resolve(false);
                    console.warn('problem uploading image');
                }
            };
            xhr.open('post', AppSettings.BASE_URL + 'image/' + AuthServices.getUserHash() + '/' +
                AuthServices.getUserID() + '/');
            xhr.send(fd);
            return deferred.promise;
        }

        return svc;

    }]);
